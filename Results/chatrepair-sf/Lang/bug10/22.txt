The following code contains a bug:
    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {
        boolean wasWhite= false;
        for(int i= 0; i<value.length(); ++i) {
            char c= value.charAt(i);
            if(Character.isWhitespace(c)) {
                if(!wasWhite) {
                    wasWhite= true;
                    regex.append("\\s*+");
                }
                continue;
            }
            wasWhite= false;
            switch(c) {
            case '\'':
                if(unquote) {
                    if(++i==value.length()) {
                        return regex;
                    }
                    c= value.charAt(i);
                }
                break;
            case '?':
            case '[':
            case ']':
            case '(':
            case ')':
            case '{':
            case '}':
            case '\\':
            case '|':
            case '*':
            case '+':
            case '^':
            case '$':
            case '.':
                regex.append('\\');
            }
            regex.append(c);
        }
        return regex;
    }
The code fails on this test:
org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831
on this test line:
        testSdfAndFdp("M E","3  Tue", true);
with the following test error:
junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>
It can be fixed by these possible correct version:
Correct version 1 :

    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {
        for (int i = 0; i < value.length(); i++) {
            char c = value.charAt(i);
            switch (c) {
                case '?':
                case '[':
                case ']':
                case '(':
                case ')':
                case '{':
                case '}':
                case '\\':
                case '|':
                case '*':
                case '+':
                case '^':
                case '$':
                case '.':
                    regex.append('\\').append(c);
                    break;
                case '\'':
                    if (unquote) {
                        if (i + 1 < value.length()) {
                            regex.append(value.charAt(++i));
                        }
                    } else {
                        regex.append(c);
                    }
                    break;
                default:
                    regex.append(c);
                    break;
            }
        }
        return regex;
    }

Correct version 2 :

private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {
    for(int i= 0; i<value.length(); ++i) {
        char c= value.charAt(i);
        switch(c) {
            case '\'':
                if(unquote && i + 1 < value.length()) {
                    regex.append(value.charAt(++i));
                } else {
                    regex.append(c);
                }
                break;
            case '?':
            case '[':
            case ']':
            case '(':
            case ')':
            case '{':
            case '}':
            case '\\':
            case '|':
            case '*':
            case '+':
            case '^':
            case '$':
            case '.':
                regex.append('\\').append(c);
                break;
            default:
                regex.append(c);
        }
    }
    return regex;
}

Correct version 3 :

private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {
    for (int i = 0; i < value.length(); i++) {
        char c = value.charAt(i);
        switch (c) {
            case '\'':
                if (unquote && i + 1 < value.length()) {
                    regex.append(value.charAt(++i));
                } else {
                    regex.append(c);
                }
                break;
            case '?':
            case '[':
            case ']':
            case '(':
            case ')':
            case '{':
            case '}':
            case '\\':
            case '|':
            case '*':
            case '+':
            case '^':
            case '$':
            case '.':
                regex.append('\\').append(c);
                break;
            default:
                regex.append(c);
        }
    }
    return regex;
}

Please generate an alternative correct version of the function in the form of Java Markdown code block.
```java
private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {
    for (int i = 0; i < value.length(); i++) {
        char c = value.charAt(i);
        switch (c) {
            case '\'':
                if (unquote && i + 1 < value.length()) {
                    regex.append(value.charAt(++i));
                } else {
                    regex.append(c);
                }
                break;
            case '?':
            case '[':
            case ']':
            case '(':
            case ')':
            case '{':
            case '}':
            case '\\':
            case '|':
            case '*':
            case '+':
            case '^':
            case '$':
            case '.':
                regex.append('\\').append(c);
                break;
            default:
                regex.append(c);
                break;
        }
    }
    return regex;
}
```
