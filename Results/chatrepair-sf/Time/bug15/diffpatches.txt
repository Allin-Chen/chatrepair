  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
- if (total / val2 != val1) {
+ if (val1 > 0) {
+ if (val2 > 0) {
+ if (val1 > Long.MAX_VALUE / val2) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ } else {
+ if (val2 < Long.MIN_VALUE / val1) {
+ throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
+ }
+ } else {
+ if (val2 > 0) {
+ if (val1 < Long.MIN_VALUE / val2) {
+ throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+ }
+ } else {
+ if (val1 != -1 || val2 != Integer.MIN_VALUE) {
+ if (val2 < Long.MAX_VALUE / val1) {
+ throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+ }
+ }
+ }
+ }
+ return val1 * val2;
+ }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
+ if (val1 > 0 && val2 > 0 && val1 > Long.MAX_VALUE / val2) {
- long total = val1 * val2;
- if (total / val2 != val1) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ if (val1 > 0 && val2 < 0 && val2 < Long.MIN_VALUE / val1) {
+ throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
+ if (val1 < 0 && val2 > 0 && val1 < Long.MIN_VALUE / val2) {
+ throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+ }
+ if (val1 < 0 && val2 < 0 && (val1 != -1 || val2 != Integer.MIN_VALUE) && val2 < Long.MAX_VALUE / val1) {
+ throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+ }
+ return val1 * val2;
+ }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
- if (total / val2 != val1) {
+ if ((val1 > 0 && val2 > 0 && val1 > Long.MAX_VALUE / val2) ||
+ (val1 > 0 && val2 < 0 && val2 < Long.MIN_VALUE / val1) ||
+ (val1 < 0 && val2 > 0 && val1 < Long.MIN_VALUE / val2) ||
+ (val1 < 0 && val2 < 0 && (val1 != -1 || val2 != Integer.MIN_VALUE) && val2 < Long.MAX_VALUE / val1)) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ return val1 * val2;
  }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
?       ----

+ long result = val1 * val2;
?      +++++

- if (total / val2 != val1) {
+ if (val1 != 0 && result / val1 != val2) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ return result;
  }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
?       ----

+ long result = val1 * val2;
?      +++++

- if (total / val2 != val1) {
+ if ((val1 > 0 && val2 > 0 && result / val1 != val2) ||
+ (val1 > 0 && val2 < 0 && result / val1 != val2) ||
+ (val1 < 0 && val2 > 0 && result / val1 != val2) ||
+ (val1 < 0 && val2 < 0 && result / val1 != val2)) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ return result;
  }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
- if (total / val2 != val1) {
+ long result = val1 * (long)val2;
+ if (val2 != (int)(result / val1)) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ return result;
  }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
- if (total / val2 != val1) {
+ long result = (long)val1 * val2;
+ if (val2 != (int)(result / val1)) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ return result;
  }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
- if (total / val2 != val1) {
+ long result = (long)val1 * val2;
+ if (val2 != (double)result / val1) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ return result;
  }

  public static long safeMultiply(long val1, int val2) {
+ if (val1 == 0 || val2 == 0) {
- switch (val2) {
- case -1:
- return -val1;
- case 0:
  return 0L;
- case 1:
- return val1;
  }
- long total = val1 * val2;
- if (total / val2 != val1) {
+ long result = (long)val1 * val2;
+ if (val2 != (int)((double) result / val1)) {
  throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
  }
- return total;
+ return result;
  }

