You are an Automated Program Repair Tool.
Here is an example of a repair job:
<Example start>
Example buggy function and request:
The following code contains a buggy :
    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {
        if (cal1 == null || cal2 == null) {
            throw new IllegalArgumentException("The date must not be null");
        }
        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
                cal1.getClass() == cal2.getClass());
    }
the code fails on this test: org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTime_Cal
on this test line:
assertFalse("LANG-677", DateUtils.isSameLocalTime(cal3, cal4));
with the following test error:
junit.framework.AssertionFailedError: LANG-677
Please provide an analysis of the problem and the expected behaviour of the correct fix, and the correct version of the function in the form of Java Markdown code block.
Example response:

1. Analysis of the problem:
The problem seems to arise from the comparison of hours using `Calendar.HOUR`. However, `Calendar.HOUR` represents the 12-hour clock hour whereas `Calendar.HOUR_OF_DAY` represents the 24-hour clock hour. Since the code is aiming to compare the hour component in a manner consistent with the other fields (such as minute, second, millisecond), it should use `Calendar.HOUR_OF_DAY` instead.

2. Expected Behavior of Correct Fix:
The correct fix should ensure that the comparison is done using the 24-hour clock hour (Calendar.HOUR_OF_DAY) to maintain consistency with the other fields.

3. Correct function:
This is the correct version of the function in the form of Java Markdown code block:
```java
    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {
        if (cal1 == null || cal2 == null) {
            throw new IllegalArgumentException("The date must not be null");
        }
        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&
                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
                cal1.getClass() == cal2.getClass());
    }
```
Changes made:
Replaced Calendar.HOUR with Calendar.HOUR_OF_DAY to use 24-hour time format.

<Example end>
The following code contains a bug:
    protected AxisState drawLabel(String label, Graphics2D g2, 
            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
            AxisState state, PlotRenderingInfo plotState) {

        // it is unlikely that 'state' will be null, but check anyway...
        if (state == null) {
            throw new IllegalArgumentException("Null 'state' argument.");
        }
        
        if ((label == null) || (label.equals(""))) {
            return state;
        }

        Font font = getLabelFont();
        RectangleInsets insets = getLabelInsets();
        g2.setFont(font);
        g2.setPaint(getLabelPaint());
        FontMetrics fm = g2.getFontMetrics();
        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
        Shape hotspot = null;
        
        if (edge == RectangleEdge.TOP) {
            AffineTransform t = AffineTransform.getRotateInstance(
                    getLabelAngle(), labelBounds.getCenterX(), 
                    labelBounds.getCenterY());
            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
            labelBounds = rotatedLabelBounds.getBounds2D();
            float w = (float) labelBounds.getWidth();
            float h = (float) labelBounds.getHeight();
            float labelx = (float) dataArea.getCenterX();
            float labely = (float) (state.getCursor() - insets.getBottom() 
                    - h / 2.0);
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                    labely - h / 2.0f, w, h);
            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.BOTTOM) {
            AffineTransform t = AffineTransform.getRotateInstance(
                    getLabelAngle(), labelBounds.getCenterX(), 
                    labelBounds.getCenterY());
            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
            labelBounds = rotatedLabelBounds.getBounds2D();
            float w = (float) labelBounds.getWidth();
            float h = (float) labelBounds.getHeight();
            float labelx = (float) dataArea.getCenterX();
            float labely = (float) (state.getCursor() + insets.getTop() 
                    + h / 2.0);
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                    labely - h / 2.0f, w, h);
            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.LEFT) {
            AffineTransform t = AffineTransform.getRotateInstance(
                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
                    labelBounds.getCenterY());
            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
            labelBounds = rotatedLabelBounds.getBounds2D();
            float w = (float) labelBounds.getWidth();
            float h = (float) labelBounds.getHeight();
            float labelx = (float) (state.getCursor() - insets.getRight() 
                    - w / 2.0);
            float labely = (float) dataArea.getCenterY();
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
                    TextAnchor.CENTER);
            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                    labely - h / 2.0f, w, h);
            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
                    + insets.getRight());
        }
        else if (edge == RectangleEdge.RIGHT) {

            AffineTransform t = AffineTransform.getRotateInstance(
                    getLabelAngle() + Math.PI / 2.0, 
                    labelBounds.getCenterX(), labelBounds.getCenterY());
            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
            labelBounds = rotatedLabelBounds.getBounds2D();
            float w = (float) labelBounds.getWidth();
            float h = (float) labelBounds.getHeight();
            float labelx = (float) (state.getCursor() 
                            + insets.getLeft() + w / 2.0);
            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
                    / 2.0);
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
                    TextAnchor.CENTER);
            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                    labely - h / 2.0f, w, h);
            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
                    + insets.getRight());

        }
        if (plotState != null && hotspot != null) {
            ChartRenderingInfo owner = plotState.getOwner();
                EntityCollection entities = owner.getEntityCollection();
                if (entities != null) {
                    entities.add(new AxisLabelEntity(this, hotspot, 
                            this.labelToolTip, this.labelURL));
                }
        }
        return state;

    }
The code fails on this test:
org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
on this test line:
        assertTrue(success);
with the following test error:
junit.framework.AssertionFailedError
Please provide an analysis of the problem and the expected behaviour of the correct fix, and the correct version of the function in the form of Java Markdown code block.


1. Analysis of the problem:
The issue seems to be related to the handling of the edge cases for drawing labels in different orientations (TOP, BOTTOM, LEFT, RIGHT) in the drawLabel method. The bug could be causing incorrect positioning of the labels or unexpected behavior when drawing labels in certain orientations.

2. Expected Behavior of Correct Fix:
The correct fix should ensure that the labels are correctly positioned and drawn in the different edge orientations (TOP, BOTTOM, LEFT, RIGHT) without any unexpected behavior.

3. Correct function:
This is the correct version of the function in the form of Java Markdown code block:

```java
protected AxisState drawLabel(String label, Graphics2D g2, 
            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
            AxisState state, PlotRenderingInfo plotState) {

        // it is unlikely that 'state' will be null, but check anyway...
        if (state == null) {
            throw new IllegalArgumentException("Null 'state' argument.");
        }
        
        if ((label == null) || (label.equals(""))) {
            return state;
        }

        Font font = getLabelFont();
        RectangleInsets insets = getLabelInsets();
        g2.setFont(font);
        g2.setPaint(getLabelPaint());
        FontMetrics fm = g2.getFontMetrics();
        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
        Shape hotspot = null;
        
        double labelx, labely;
        switch (edge) {
            case TOP:
                labelx = dataArea.getCenterX();
                labely = state.getCursor() - insets.getBottom() - labelBounds.getHeight() / 2.0;
                break;
            case BOTTOM:
                labelx = dataArea.getCenterX();
                labely = state.getCursor() + insets.getTop() + labelBounds.getHeight() / 2.0;
                break;
            case LEFT:
                labelx = state.getCursor() - insets.getRight() - labelBounds.getWidth() / 2.0;
                labely = dataArea.getCenterY();
                break;
            case RIGHT:
                labelx = state.getCursor() + insets.getLeft() + labelBounds.getWidth() / 2.0;
                labely = dataArea.getY() + dataArea.getHeight() / 2.0;
                break;
            default:
                // Handle other edge cases here
                labelx = 0;
                labely = 0;
        }

        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());
        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
        labelBounds = rotatedLabelBounds.getBounds2D();
        float w = (float) labelBounds.getWidth();
        float h = (float) labelBounds.getHeight();
        
        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
        hotspot = new Rectangle2D.Float((float)labelx - w / 2.0f, (float)labely - h / 2.0f, w, h);
        
        switch (edge) {
            case TOP:
                state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
                break;
            case BOTTOM:
                state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
                break;
            case LEFT:
                state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
                break;
            case RIGHT:
                state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
        }

        if (plotState != null && hotspot != null) {
            ChartRenderingInfo owner = plotState.getOwner();
            EntityCollection entities = owner.getEntityCollection();
            if (entities != null) {
                entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));
            }
        }
        return state;
    }
```

Changes made:
- Replaced the repetitive if-else if statements with a switch-case block for better readability and maintenance.
- Corrected the calculation of labelx and labely based on the edge orientation.
- Moved the rotation transformation outside the if-else blocks to ensure uniform handling.
- Updated the cursor position adjustment based on the edge orientation.

  protected AxisState drawLabel(String label, Graphics2D g2,
  Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,
  AxisState state, PlotRenderingInfo plotState) {
  // it is unlikely that 'state' will be null, but check anyway...
  if (state == null) {
  throw new IllegalArgumentException("Null 'state' argument.");
  }
  if ((label == null) || (label.equals(""))) {
  return state;
  }
  Font font = getLabelFont();
  RectangleInsets insets = getLabelInsets();
  g2.setFont(font);
  g2.setPaint(getLabelPaint());
  FontMetrics fm = g2.getFontMetrics();
  Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
  Shape hotspot = null;
- if (edge == RectangleEdge.TOP) {
- AffineTransform t = AffineTransform.getRotateInstance(
- getLabelAngle(), labelBounds.getCenterX(),
- labelBounds.getCenterY());
+ double labelx, labely;
+ switch (edge) {
+ case TOP:
+ labelx = dataArea.getCenterX();
+ labely = state.getCursor() - insets.getBottom() - labelBounds.getHeight() / 2.0;
+ break;
+ case BOTTOM:
+ labelx = dataArea.getCenterX();
+ labely = state.getCursor() + insets.getTop() + labelBounds.getHeight() / 2.0;
+ break;
+ case LEFT:
+ labelx = state.getCursor() - insets.getRight() - labelBounds.getWidth() / 2.0;
+ labely = dataArea.getCenterY();
+ break;
+ case RIGHT:
+ labelx = state.getCursor() + insets.getLeft() + labelBounds.getWidth() / 2.0;
+ labely = dataArea.getY() + dataArea.getHeight() / 2.0;
+ break;
+ default:
+ // Handle other edge cases here
+ labelx = 0;
+ labely = 0;
+ }
+ AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());
  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
  labelBounds = rotatedLabelBounds.getBounds2D();
  float w = (float) labelBounds.getWidth();
  float h = (float) labelBounds.getHeight();
+ TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
+ hotspot = new Rectangle2D.Float((float)labelx - w / 2.0f, (float)labely - h / 2.0f, w, h);
+ switch (edge) {
+ case TOP:
- float labelx = (float) dataArea.getCenterX();
- float labely = (float) (state.getCursor() - insets.getBottom()
- - h / 2.0);
- TextUtilities.drawRotatedString(label, g2, labelx, labely,
- TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
- hotspot = new Rectangle2D.Float(labelx - w / 2.0f,
- labely - h / 2.0f, w, h);
- state.cursorUp(insets.getTop() + labelBounds.getHeight()
+ state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
?                                                         +++++++++++++++++++++++

+ break;
+ case BOTTOM:
- + insets.getBottom());
- }
- else if (edge == RectangleEdge.BOTTOM) {
- AffineTransform t = AffineTransform.getRotateInstance(
- getLabelAngle(), labelBounds.getCenterX(),
- labelBounds.getCenterY());
- Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
- labelBounds = rotatedLabelBounds.getBounds2D();
- float w = (float) labelBounds.getWidth();
- float h = (float) labelBounds.getHeight();
- float labelx = (float) dataArea.getCenterX();
- float labely = (float) (state.getCursor() + insets.getTop()
- + h / 2.0);
- TextUtilities.drawRotatedString(label, g2, labelx, labely,
- TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
- hotspot = new Rectangle2D.Float(labelx - w / 2.0f,
- labely - h / 2.0f, w, h);
- state.cursorDown(insets.getTop() + labelBounds.getHeight()
+ state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
?                                                           +++++++++++++++++++++++

+ break;
+ case LEFT:
- + insets.getBottom());
- }
- else if (edge == RectangleEdge.LEFT) {
- AffineTransform t = AffineTransform.getRotateInstance(
- getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),
- labelBounds.getCenterY());
- Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
- labelBounds = rotatedLabelBounds.getBounds2D();
- float w = (float) labelBounds.getWidth();
- float h = (float) labelBounds.getHeight();
- float labelx = (float) (state.getCursor() - insets.getRight()
- - w / 2.0);
- float labely = (float) dataArea.getCenterY();
- TextUtilities.drawRotatedString(label, g2, labelx, labely,
- TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0,
- TextAnchor.CENTER);
- hotspot = new Rectangle2D.Float(labelx - w / 2.0f,
- labely - h / 2.0f, w, h);
- state.cursorLeft(insets.getLeft() + labelBounds.getWidth()
+ state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
?                                                           ++++++++++++++++++++++

+ break;
+ case RIGHT:
- + insets.getRight());
- }
- else if (edge == RectangleEdge.RIGHT) {
- AffineTransform t = AffineTransform.getRotateInstance(
- getLabelAngle() + Math.PI / 2.0,
- labelBounds.getCenterX(), labelBounds.getCenterY());
- Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
- labelBounds = rotatedLabelBounds.getBounds2D();
- float w = (float) labelBounds.getWidth();
- float h = (float) labelBounds.getHeight();
- float labelx = (float) (state.getCursor()
- + insets.getLeft() + w / 2.0);
- float labely = (float) (dataArea.getY() + dataArea.getHeight()
- / 2.0);
- TextUtilities.drawRotatedString(label, g2, labelx, labely,
- TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0,
- TextAnchor.CENTER);
- hotspot = new Rectangle2D.Float(labelx - w / 2.0f,
- labely - h / 2.0f, w, h);
- state.cursorRight(insets.getLeft() + labelBounds.getWidth()
+ state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
?                                                            ++++++++++++++++++++++

- + insets.getRight());
  }
  if (plotState != null && hotspot != null) {
  ChartRenderingInfo owner = plotState.getOwner();
  EntityCollection entities = owner.getEntityCollection();
  if (entities != null) {
+ entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));
- entities.add(new AxisLabelEntity(this, hotspot,
- this.labelToolTip, this.labelURL));
  }
  }
  return state;
  }