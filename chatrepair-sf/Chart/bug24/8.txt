The following code contains a bug:
    public Paint getPaint(double value) {
        double v = Math.max(value, this.lowerBound);
        v = Math.min(v, this.upperBound);
        int g = (int) ((value - this.lowerBound) / (this.upperBound 
                - this.lowerBound) * 255.0);
        return new Color(g, g, g);
    }
The code fails on this test:
org.jfree.chart.renderer.junit.GrayPaintScaleTests::testGetPaint
on this test line:
        c = (Color) gps.getPaint(-0.5);
with the following test error:
java.lang.IllegalArgumentException: Color parameter outside of expected range: Red Green Blue
It can be fixed by these possible correct version:
Correct version 1 :

public Paint getPaint(double value) {
    double v = Math.max(value, this.lowerBound);
    v = Math.min(v, this.upperBound);
    
    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);
    g = Math.min(255, Math.max(0, g)); // Clamp 'g' value to be within 0-255 range
    
    return new Color(g, g, g);
}

Correct version 2 :

public Paint getPaint(double value) {
    // Ensure value is within bounds
    double v = Math.max(value, this.lowerBound);
    v = Math.min(v, this.upperBound);
    
    // Calculate grayscale value based on range
    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);
    
    // Clamp grayscale value to be within 0-255 range
    g = Math.min(255, Math.max(0, g));
    
    return new Color(g, g, g);
}

Correct version 3 :

public Paint getPaint(double value) {
    // Ensure value is within bounds
    double v = Math.max(value, this.lowerBound);
    v = Math.min(v, this.upperBound);
    
    // Calculate grayscale value based on range
    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);
    
    // Clamp grayscale value to be within 0-255 range
    g = Math.min(255, Math.max(0, g));
    
    // Create a grayscale Color using the calculated value
    return new Color(g, g, g);
}

Correct version 4 :

public Paint getPaint(double value) {
    double v = Math.max(value, this.lowerBound);
    v = Math.min(v, this.upperBound);
    
    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);
    g = Math.min(Math.max(g, 0), 255); // Ensure 'g' value is within 0-255 range
    
    return new Color(g, g, g);
}

Correct version 5 :

public Paint getPaint(double value) {
    // Ensure value is within bounds
    double v = Math.max(value, this.lowerBound);
    v = Math.min(v, this.upperBound);
    
    // Calculate grayscale value based on range
    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);
    
    // Clamp grayscale value to be within 0-255 range
    g = Math.min(Math.max(0, g), 255);
    
    // Create a grayscale Color using the calculated value
    return new Color(g, g, g);
}

Correct version 6 :

public Paint getPaint(double value) {
    double v = Math.max(value, this.lowerBound);
    v = Math.min(v, this.upperBound);
    
    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);
    g = Math.min(Math.max(0, g), 255); // Ensure 'g' value is within 0-255 range
    
    return new Color(g, g, g);
}

Please generate an alternative correct version of the function in the form of Java Markdown code block.
```java
public Paint getPaint(double value) {
    double v = Math.max(value, this.lowerBound);
    v = Math.min(v, this.upperBound);
    
    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);
    g = Math.min(Math.max(0, g), 255); // Ensure 'g' value is within 0-255 range
    
    return new Color(g, g, g);
}
```
